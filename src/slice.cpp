/** 
* @file slice.cpp 
* @brief this header file contains all the implementations of slicing methods that can be applied to a volume.
* @author Shengzhi Tian (edsml-st1123) 
* @author Berat Yildizgorer (asce-by1123)
* @author Georgia Ray (edsml-ger23)
* @author Zhikang Dong (acse-zd1420)
* @author Yunting Tao (acse-yt2323)
* @author Chuhan Li (edsml-ll423)
* @date 19/03/2024
*/

#include "slice.h"


/**
 * @details This function generates a slice from the given volume.
 * Volume is a class that contains a vector of Image objects. The slice is generated by taking the i-th slice of each Image in the Volume for any plane.
 * @author Zhikang Dong
 */
Image Slice::slice(const Volume& volume, int n, SliceType type) {
    int w = volume.getImages()[0].width();
    int h = volume.getImages()[0].height();
    int c = volume.getImages()[0].channels();

    std::vector<Image> images = volume.getImages();

    int z = images.size();
    
    if (type == SliceType::XZ){
        unsigned char* data = new unsigned char[w * z * c];
        int index = 0;
        for (auto &img : images){
            unsigned char* imgData = img.get_data();
            for(int j = 0; j < 1; ++j) {
                for(int i = 0; i < w; ++i) {
                    int d_index = index * w * c + i * c;
                    int img_index = n * w * c + i * c;
                    for (int k = 0; k < c; ++k) {
                        data[d_index + k] = imgData[img_index + k];
                    }
                }
            }
            index++;
        }
        return Image(data, w, z, c);
    }

    else if (type == SliceType::YZ){
        unsigned char* data = new unsigned char[h * z * c];
        int index = 0;
        for (auto &img : images){
            unsigned char* imgData = img.get_data();
            for(int j = 0; j < h; ++j) {
                for(int i = 0; i < 1; ++i) {
                    int d_index = index * h * c + j * c;
                    int img_index = j * w * c + n * c;
                    for (int k = 0; k < c; ++k) {
                        data[d_index + k] = imgData[img_index + k];
                    }
                }
            }
            index++;
        }
        return Image(data, h, z, c);
    }
    else{
        throw std::runtime_error("Invalid SliceType");
    }
}